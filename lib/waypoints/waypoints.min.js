// Definição do namespace do Waypoint como uma função anônima imediatamente invocada (IIFE)
!function() {
    "use strict";

    // Definição da classe Waypoint
    function t(o) {
        // Verifica se as opções foram passadas para o construtor Waypoint
        if (!o) throw new Error("No options passed to Waypoint constructor");
        // Verifica se a opção de elemento foi passada para o construtor Waypoint
        if (!o.element) throw new Error("No element option passed to Waypoint constructor");
        // Verifica se a opção de manipulador foi passada para o construtor Waypoint
        if (!o.handler) throw new Error("No handler option passed to Waypoint constructor");

        // Gera uma chave única para este Waypoint
        this.key = "waypoint-" + e;

        // Extende as opções padrão com as opções fornecidas
        this.options = t.Adapter.extend({}, t.defaults, o);

        // Define o elemento associado a este Waypoint
        this.element = this.options.element;

        // Cria um adaptador para o elemento
        this.adapter = new t.Adapter(this.element);

        // Define o manipulador de callback
        this.callback = o.handler;

        // Determina o eixo do Waypoint com base na opção horizontal
        this.axis = this.options.horizontal ? "horizontal" : "vertical";

        // Define se o Waypoint está habilitado
        this.enabled = this.options.enabled;

        // Ponto de gatilho do Waypoint (ainda não definido)
        this.triggerPoint = null;

        // Localiza ou cria o grupo associado a este Waypoint
        this.group = t.Group.findOrCreate({
            name: this.options.group,
            axis: this.axis
        });

        // Localiza ou cria o contexto associado a este Waypoint
        this.context = t.Context.findOrCreateByElement(this.options.context);

        // Mapeia o offset definido usando alias predefinidos
        if (t.offsetAliases[this.options.offset]) {
            this.options.offset = t.offsetAliases[this.options.offset];
        }

        // Adiciona este Waypoint ao grupo e ao contexto
        this.group.add(this);
        this.context.add(this);

        // Registra este Waypoint no objeto 'i' com uma chave única
        i[this.key] = this;

        // Incrementa o contador de Waypoints
        e += 1;
    }

    // Contador global de Waypoints
    var e = 0;

    // Objeto para armazenar todos os Waypoints
    var i = {};

    // Protótipo do Waypoint para definir métodos comuns
    t.prototype = {
        // Método para enfileirar um gatilho para este Waypoint
        queueTrigger: function(t) {
            this.group.queueTrigger(this, t);
        },
        // Método para disparar o gatilho deste Waypoint
        trigger: function(t) {
            if (this.enabled && this.callback) {
                this.callback.apply(this, t);
            }
        },
        // Método para destruir este Waypoint
        destroy: function() {
            this.context.remove(this);
            this.group.remove(this);
            delete i[this.key];
        },
        // Método para desabilitar este Waypoint
        disable: function() {
            this.enabled = false;
            return this;
        },
        // Método para habilitar este Waypoint
        enable: function() {
            this.context.refresh();
            this.enabled = true;
            return this;
        },
        // Método para obter o próximo Waypoint no grupo
        next: function() {
            return this.group.next(this);
        },
        // Método para obter o Waypoint anterior no grupo
        previous: function() {
            return this.group.previous(this);
        }
    };

    // Seção de definição das funções e objetos globais do Waypoint
    // ...

    // Função que inicializa o Waypoint quando a página é carregada
    window.Waypoint = t;
}();
